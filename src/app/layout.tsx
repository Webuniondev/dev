import "./globals.css";

import type { Metadata } from "next";
import { Caveat, Geist, Geist_Mono, Inter } from "next/font/google";

import { AuthGateway } from "@/components/auth-gateway";
import { AuthWelcomeListener } from "@/components/auth-welcome-listener";
import { ToasterSonner } from "@/components/sonner-toaster";
import { supabaseServer } from "@/lib/supabase/server";

import { AppProviders } from "./providers";
import { SentryInit } from "./sentry-init";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const inter = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
});

const caveat = Caveat({
  variable: "--font-caveat",
  subsets: ["latin"],
  weight: ["400", "700"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="fr">
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${inter.variable} ${caveat.variable} font-sans antialiased`}
      >
        <SentryInit />
        <AppProviders>
          <UserSnapshot>{children}</UserSnapshot>
        </AppProviders>
        <ToasterSonner />
        {/* DÃ©clenchement client au SIGNED_IN */}
        <AuthWelcomeListener />
      </body>
    </html>
  );
}

async function UserSnapshot({ children }: { children: React.ReactNode }) {
  const supabase = await supabaseServer({ readOnly: true });
  const {
    data: { user },
  } = await supabase.auth.getUser();
  let roleKey: "user" | "pro" | "admin" | null = null;
  let displayName: string | null = null;
  let avatarUrl: string | null = null;
  if (user) {
    const { data: prof } = await supabase
      .from("user_profile")
      .select("role_key, first_name, last_name, avatar_url")
      .eq("user_id", user.id)
      .maybeSingle();
    roleKey = (prof?.role_key as "user" | "pro" | "admin" | null) ?? null;
    displayName = `${prof?.first_name ?? ""} ${prof?.last_name ?? ""}`.trim() || null;
    avatarUrl = prof?.avatar_url ?? user.user_metadata?.avatar_url ?? null;
  }

  return (
    <>
      {/* Hydrate Zustand auth store on client */}
      <AuthGateway
        userId={user?.id ?? null}
        email={user?.email ?? null}
        roleKey={roleKey}
        displayName={displayName ?? user?.user_metadata?.full_name ?? null}
        avatarUrl={avatarUrl ?? null}
      />
      {children}
    </>
  );
}
